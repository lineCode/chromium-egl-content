--- chromium/chromium-55.0.2883.59/content/gpu/gpu_child_thread.cc.old	2018-07-12 17:48:36.490986236 -0400
+++ chromium/chromium-55.0.2883.59/content/gpu/gpu_child_thread.cc	2018-07-14 09:52:43.350288976 -0400
@@ -359,14 +359,10 @@
   media_service_.reset(new media::MediaService(gpu_channel_manager_.get()));
 
   // Only set once per process instance.
-  service_factory_.reset(new GpuServiceFactory);
-
-  GetInterfaceRegistry()->AddInterface(base::Bind(
-      &GpuChildThread::BindServiceFactoryRequest, base::Unretained(this)));
-
   if (GetContentClient()->gpu()) {  // NULL in tests.
     GetContentClient()->gpu()->ExposeInterfacesToBrowser(GetInterfaceRegistry(),
-                                                         gpu_preferences);
+                                                         gpu_preferences,
+                                                         gpu_channel_manager_.get());
     GetContentClient()->gpu()->ConsumeInterfacesFromBrowser(
         GetRemoteInterfaces());
   }
--- chromium/chromium-55.0.2883.59/content/public/gpu/content_gpu_client.h.old	2018-07-12 17:53:30.556974849 -0400
+++ chromium/chromium-55.0.2883.59/content/public/gpu/content_gpu_client.h	2018-07-14 09:56:45.645822276 -0400
@@ -34,7 +34,8 @@
   // process via |registry|.
   virtual void ExposeInterfacesToBrowser(
       shell::InterfaceRegistry* registry,
-      const gpu::GpuPreferences& gpu_preferences) {}
+      const gpu::GpuPreferences& gpu_preferences,
+      gpu::GpuChannelManager* gpu_channel_manager) {}
 
   // Allow the client to bind interfaces exposed by the browser process.
   virtual void ConsumeInterfacesFromBrowser(
--- chromium/chromium-55.0.2883.59/media/mojo/interfaces/video_decoder.mojom.old	2018-07-14 13:01:58.711511296 -0400
+++ chromium/chromium-55.0.2883.59/media/mojo/interfaces/video_decoder.mojom	2018-07-14 13:04:50.913395617 -0400
@@ -6,6 +6,13 @@
 
 import "media/mojo/interfaces/media_types.mojom";
 
+// Identifies a CommandBufferStub. MediaGpuChannelManager is responsible
+// for minting |channel_token| values.
+struct CommandBufferId {
+  mojo_base.mojom.UnguessableToken channel_token;
+  int32 route_id;
+};
+
 interface VideoDecoder {
   // Initialize the decoder. This must be called before any other method.
   //
@@ -15,6 +22,7 @@
   // TODO(sandersd): Rename to Initialize() if/when
   // media::VideoDecoder::Initialize() is renamed to Configure().
   Construct(associated VideoDecoderClient client,
+            CommandBufferId? command_buffer_id,
             handle<data_pipe_consumer> decoder_buffer_pipe);
 
   // Configure (or reconfigure) the decoder. This must be called before decoding
--- chromium/chromium-55.0.2883.59/media/mojo/services/mojo_video_decoder_service.h.old	2018-07-14 13:08:42.271912548 -0400
+++ chromium/chromium-55.0.2883.59/media/mojo/services/mojo_video_decoder_service.h	2018-07-14 13:09:05.920168898 -0400
@@ -28,6 +28,7 @@
 
   // mojom::VideoDecoder implementation
   void Construct(mojom::VideoDecoderClientAssociatedPtrInfo client,
+                 mojom::CommandBufferIdPtr command_buffer_id,
                  mojo::ScopedDataPipeConsumerHandle decoder_buffer_pipe) final;
   void Initialize(mojom::VideoDecoderConfigPtr config,
                   bool low_delay,
--- chromium/chromium-55.0.2883.59/media/mojo/services/mojo_video_decoder_service.cc.old	2018-07-14 13:07:50.359349221 -0400
+++ chromium/chromium-55.0.2883.59/media/mojo/services/mojo_video_decoder_service.cc	2018-07-14 13:08:33.651819064 -0400
@@ -31,6 +31,7 @@
 
 void MojoVideoDecoderService::Construct(
     mojom::VideoDecoderClientAssociatedPtrInfo client,
+    mojom::CommandBufferIdPtr command_buffer_id,
     mojo::ScopedDataPipeConsumerHandle decoder_buffer_pipe) {
   DVLOG(1) << __FUNCTION__;
 
@@ -39,7 +40,7 @@
 
   // TODO(sandersd): Provide callback for requesting a stub.
   decoder_ = mojo_media_client_->CreateVideoDecoder(
-      base::ThreadTaskRunnerHandle::Get());
+      base::ThreadTaskRunnerHandle::Get(), std::move(command_buffer_id));
 
   client_.Bind(std::move(client));
 
--- chromium/chromium-55.0.2883.59/media/mojo/services/mojo_media_client.cc.old	2018-07-14 13:11:14.765562701 -0400
+++ chromium/chromium-55.0.2883.59/media/mojo/services/mojo_media_client.cc	2018-07-14 13:11:30.977737736 -0400
@@ -27,7 +27,8 @@
 }
 
 std::unique_ptr<VideoDecoder> MojoMediaClient::CreateVideoDecoder(
-    scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
+    scoped_refptr<base::SingleThreadTaskRunner> task_runner,
+    mojom::CommandBufferIdPtr command_buffer_id) {
   return nullptr;
 }
 
--- chromium/chromium-55.0.2883.59/media/mojo/services/mojo_media_client.h.old	2018-07-14 13:10:50.277298167 -0400
+++ chromium/chromium-55.0.2883.59/media/mojo/services/mojo_media_client.h	2018-07-14 13:11:08.289492760 -0400
@@ -45,7 +45,8 @@
       scoped_refptr<base::SingleThreadTaskRunner> task_runner);
 
   virtual std::unique_ptr<VideoDecoder> CreateVideoDecoder(
-      scoped_refptr<base::SingleThreadTaskRunner> task_runner);
+      scoped_refptr<base::SingleThreadTaskRunner> task_runner,
+      mojom::CommandBufferIdPtr command_buffer_id);
 
   // Returns the output sink used for rendering audio on |audio_device_id|.
   // May be null if the RendererFactory doesn't need an audio sink.
